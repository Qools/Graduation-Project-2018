#ngram_range = [(1,1),(1,2),(1,3)]
ngram_range = [(1,1),(1,2)]

max_df = [0.65,0.75,0.85,0.90]
min_df = [0.001,0.01,0.1,0.25]
#max_df = [0.65,0.75,0.85]
#min_df = [0.001,0.01,0.1]

#penal = ['l1','l2']
penal = ['l1']

for penalt in penal:
    for gram in ngram_range:
        for mx_df in max_df:
            for mn_df in min_df:

                print "For the parameters of \nmax_df=",mx_df,"min_df=",mn_df,"\nngram_range=",gram,"penalty as=",penalt
                tfidf = TfidfVectorizer(stop_words=ENGLISH_STOP_WORDS,
                                        ngram_range=gram,max_df=mx_df,min_df=mn_df)



                #X_body_tfidf = tfidf.fit_transform(X_body_text)
                X_headline_tfidf = tfidf.fit_transform(X_headline_text)

                X_headline_train_tfidf, X_headline_test_tfidf, y_headline_train, y_headline_test = train_test_split(X_headline_tfidf,y, test_size = 0.2, random_state=1234)
                #X_body_train_tfidf, X_body_test_tfidf, y_body_train, y_body_test = train_test_split(X_body_tfidf,y, test_size = 0.2, random_state=1234)

                lr = LogisticRegression(penalty=penalt,n_jobs=3)
                lr.fit(X_headline_train_tfidf, y_headline_train)
                y_pred = lr.predict(X_headline_test_tfidf)

                print "Logistig Regression F1 and Accuracy Scores : \n"
                print "F1 score {:.4}%".format( f1_score(y_headline_test, y_pred, average='macro')*100 ) 
                print "Accuracy score {:.4}%\n\n".format(accuracy_score(y_headline_test, y_pred)*100 )